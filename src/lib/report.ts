export type ParsedTest = {
  name: string;
  short?: string;
  value?: number;
  unit?: string;
  refLow?: number;
  refHigh?: number;
};

export function parseLabText(rawText: string): ParsedTest[] {
  const lines = rawText
    .split(/\r?\n/)
    .map((l) => l.trim())
    .filter(Boolean);

  const results: ParsedTest[] = [];
  const pattern = /^(.*?)(?:\s*\(([A-Za-z0-9\.\-]+)\))?\s*[:\-\t ]+([\d.,]+)\s*([a-zA-Z%\/\^\-]+)?\s*(?:\(\s*([\d.,]+)\s*[-â€“]\s*([\d.,]+)\s*([a-zA-Z%\/\^\-]+)?\s*\))?$/;

  for (const line of lines) {
    const m = line.match(pattern);
    if (!m) continue;
    const [, name, short, valueStr, unit, lowStr, highStr] = m;
    const value = valueStr ? Number(valueStr.replace(",", ".")) : undefined;
    const refLow = lowStr ? Number(lowStr.replace(",", ".")) : undefined;
    const refHigh = highStr ? Number(highStr.replace(",", ".")) : undefined;
    results.push({ name: name.trim(), short, value, unit, refLow, refHigh });
  }

  return results;
}

function riskEmoji(value?: number, low?: number, high?: number): { emoji: string; label: string } {
  if (value == null || low == null || high == null) return { emoji: "ğŸŸ¢", label: "Normal" };
  if (value < low) return { emoji: "ğŸŸ¡", label: "Hafif DÃ¼zeyde" };
  if (value > high) return { emoji: "ğŸŸ¡", label: "Hafif DÃ¼zeyde" };
  return { emoji: "ğŸŸ¢", label: "Normal" };
}

function friendlyMeaning(name: string) {
  const key = name.toLowerCase();
  if (key.includes("hemoglobin") || key.includes("hgb")) {
    return {
      meaning: "Hemoglobin, kanÄ±n oksijen taÅŸÄ±masÄ±na yardÄ±m eden temel proteindir.",
      metaphor: "Hemoglobin, ÅŸehrinize oksijen paketleri taÅŸÄ±yan kargo kamyonlarÄ±dÄ±r.",
    };
  }
  if (key.includes("wbc") || key.includes("beyaz")) {
    return {
      meaning: "Beyaz kan hÃ¼creleri, vÃ¼cudu mikroplara karÅŸÄ± savunan hÃ¼crelerdir.",
      metaphor: "Beyaz kan hÃ¼creleri, kaleyi koruyan nÃ¶betÃ§i askerlerdir.",
    };
  }
  return {
    meaning: "Bu test, vÃ¼cudunuzdaki belirli bir iÅŸlevi veya dengeyi gÃ¶sterir.",
    metaphor: "Bu deÄŸer, vÃ¼cudunuzun kontrol panelindeki bir gÃ¶sterge gibidir.",
  };
}

export function formatReport(parsed: ParsedTest[]) {
  const sections: string[] = [];
  for (const item of parsed) {
    const fullName = item.name;
    const short = item.short ? ` (${item.short})` : "";
    const valueStr = item.value != null ? String(item.value) : "-";
    const unitStr = item.unit ? ` ${item.unit}` : "";
    const refStr = item.refLow != null && item.refHigh != null ? `${item.refLow} - ${item.refHigh}${item.unit ? " " + item.unit : ""}` : "-";
    const risk = riskEmoji(item.value, item.refLow, item.refHigh);
    const { meaning, metaphor } = friendlyMeaning(fullName + (item.short ? ` ${item.short}` : ""));

    const isOut =
      item.value != null && item.refLow != null && item.refHigh != null && (item.value < item.refLow || item.value > item.refHigh);
    const patientLine = isOut
      ? `DeÄŸeriniz referans aralÄ±ÄŸÄ±nÄ±n ${item.value! < item.refLow! ? "altÄ±nda" : "Ã¼stÃ¼nde"}. Bu durumu doktorunuzla daha detaylÄ± deÄŸerlendirmeniz Ã¶nemlidir.`
      : "DeÄŸeriniz referans aralÄ±ÄŸÄ± iÃ§inde.";

    sections.push(
      `${fullName}${short}\n` +
        `SonuÃ§: ${valueStr}${unitStr} (Referans AralÄ±ÄŸÄ±: ${refStr})\n` +
        `Risk DÃ¼zeyi: ${risk.emoji} ${risk.label}\n` +
        `Bu DeÄŸer Ne Anlama Geliyor?\n` +
        `${meaning}\n` +
        `Sizin Ä°Ã§in AnlamÄ±:\n` +
        `${patientLine}\n` +
        `BasitÃ§e Anlatmak Gerekirse:\n` +
        `"${metaphor}"\n`
    );
  }

  const summary =
    "\nğŸ©º Genel DeÄŸerlendirme ve Yol HaritasÄ±\n" +
    "1. Sade Hasta Ã–zeti:\n" +
    "SonuÃ§larÄ±nÄ±z genel bir deÄŸerlendirmeden geÃ§irilmiÅŸtir. Referans dÄ±ÅŸÄ± deÄŸerler varsa, ilgili testlerde belirtilmiÅŸtir.\n\n" +
    "2. Ã–nerilen AdÄ±mlar:\n" +
    "- Bu raporu doktorunuzla paylaÅŸÄ±n ve klinik bulgularla birlikte deÄŸerlendirin.\n" +
    "- Gerekirse hekim ek testler planlayabilir veya yaÅŸam tarzÄ± Ã¶nerilerinde bulunabilir.\n\n" +
    "Bu analiz tÄ±bbi bir tanÄ± niteliÄŸi taÅŸÄ±maz ve yalnÄ±zca bilgilendirme amaÃ§lÄ±dÄ±r. SaÄŸlÄ±ÄŸÄ±nÄ±zla ilgili tÃ¼m kararlar iÃ§in mutlaka bir hekime danÄ±ÅŸmanÄ±z gerekmektedir.";

  return sections.join("\n") + "\n" + summary;
}


